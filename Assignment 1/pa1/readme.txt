The design of the calc.c :
	At first, I read the input of the program and check if there are four inputs(e.g. + d1 d2 d), if not, complain and shutdown,
	Secondly, I assign the input to char op(operation), char * n1(first input value), char * n2(second input value), char out(output format). Then I check if the input values are negative by the function isNeg for the decimal situation and save the result in check1 and check2 and if is negative I remove the first'-' from the string.
	Thirdly, I check if the input string is standard, if string is too long or has the character that should not contained in that type. If is, complain and shutdown. 
	Then I transfer the input string to int array by the function trans. In trans, I first check the type of the input string, if binary, transfer each char into int and store in the value array whoes pointer is passed to the function and return. If decimal, octal or hexadecimal, I transfer each char into a temp new int array and store the base in an int variable old. Then I divide every meaningful char in the temp array by 2 and pass the remainder to the next calculate process and save the last remainder in a new int array, which is my result of transfer decimal, octal and hexadecimal into binary. However, because by that process, the result is reverse ordered, I reverse the answer array and get my final tranfer answer and store that in my value array. 
	Then I build my operation function for the addition and substraction. I start with the last digit of the input int array and pass the carry to the lefter digit. The addition and substraction is almost the same except the addition cares the final carry while the substraction doesn't. Then I check is the result array is too long that beyong the bound, if is, complain and shutdown. If not, store that in the final array.
	Then before I operate the 2 inputs, I recheck negative boolean(check1 and check2), is the input is negative decimal, I replace the input with the result of 0 - input. And after that I do the operation.
	Finally, for the output, if it requires binary then I just output 'b' and the final array digit by digit. If it requires octal or hexadecimal, I output 'o' or 'h' and grab every 3 or 4 digit and transfer that into octal or hexadecimal and output. If it requires decimal, then I do the divide process in function trans again except for that the old base is 2 and new base is 10, and inverse and output digit by digit.

The difficulty :
	The most difficult part of this program I think is the part to figure out the way to trans decimal, octal and hexadecimal to two's complement. I know how to trans binary to them but the back way is quite difficult for me. And I spend much time to figure that out.

The time performace :
	The part of thi program that takes most time is the divide process in trans function and the process that transfer two's complement into decimal during the output section. Because that process requires to divide each digit recursively until the digits are all 0. The worst case is an n-length input array can only eliminate 1 digit per dividing process then is tooks n*n time. So the big-O of my program I think is O(n^2).

By the way, during writng the format program, I copied the code that professor gave us which transfer the float into output char. I transfered the input string into a float variable and pass that to the code professor provided and changed the last part of the professor's code so instead of adding pow10 to exponent I printed the result in another way.
